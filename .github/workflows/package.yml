name: Package GetIt for all platforms
on:
  create:
    tags:
      - 'v*'

env:
  BOOST_VERSION: 1.79.0

jobs:
  package:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            generator: Ninja
            openssl_root: /usr
            artifact_name: GetIt_x64-Linux.tar.gz

          - os: macos-latest
            generator: Ninja
            openssl_root: /usr/local/opt/openssl@3
            artifact_name: GetIt_x64-MacOS.zip

          - os: windows-latest
            generator: Ninja
            openssl_root: D:\msys2\msys64\mingw64
            artifact_name: GetIt_x64-MacOS.zip

    runs-on: ${{matrix.os}}
    continue-on-error: true
    steps:
      - name: Create a new release
        uses: actions/create-release@v1
        id: create_release
        # Use specific OS to create the release,
        # otherwise the release will be created for
        # every platform in which case the succeeding
        # platforms will fail to continue.
        if: matrix.os == 'windows-latest'
        with:
          draft: false
          prerelease: false
          release_name: ${{ github.ref }}
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
            location: ${{env.msys}}
            msystem: mingw64
            install: mingw-w64-x86_64-openssl mingw-w64-x86_64-ninja

      - name: Install MacOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install openssl ninja
        
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install -y libssl-dev cmake ninja-build

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          arch: win64_mingw81
        
      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.0
        with:
          boost_version: "${{env.BOOST_VERSION}}"

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

      - name: Create GetIt project
        run: |
          cmake . -G "${{matrix.generator}}"\
            -Dpackaging=true\
            -DCMAKE_CXX_FLAGS='-w'\
            -DBoost_INCLUDE_DIR=${{steps.install-boost.outputs.BOOST_ROOT}}/include\
            -DBoost_LIBRARY_DIRS=${{steps.install-boost.outputs.BOOST_ROOT}}/lib
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        
      - name: Build GetIt
        run: ninja GetIt

      - name: Add Qt dependencies to Windows executable and zip the executable
        if: matrix.os == 'windows-latest'
        run: |
          $windeployqt = '${{env.Qt5_Dir}}\bin\windeployqt.exe'
          & $windeployqt ./bin/GetIt.exe
          7z a -tzip ${{matrix.artifact_name}} ./bin/GetIt.exe

      - name: Add Qt dependencies to MacOS bundle and zip the bundle
        if: matrix.os == 'macos-latest'
        run: |
          macdeployqt ./bin/GetIt.app -timestamp -libpath=./_deps
          cp ./packaging/macos/icons/getit.icns ./bin/GetIt.app/Contents/Resources
          zip -rT ${{matrix.artifact_name}} ./bin/GetIt.app >> /dev/null

      - name: Upload zip-file as build artifact
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload:url: https://github.com/bartkessels/GetIt/releases/latest
          asset_path: ${{matrix.artifact_name}}
          asset_name: ${{matrix.artifact_name}}
          asset_content_type: application/zip
